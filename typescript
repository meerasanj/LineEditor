Script started on Tue 20 Feb 2024 03:03:38 PM EST
]0;sanjeevirao_mp@cobra:~/CSC245/Prog1[?1034h[sanjeevirao_mp@cobra Prog1]$ cat edut[K[Kitor.cpp
#include <iostream>
#include <cstdlib> // C standard library for exit(1) 
#include <fstream> // for c++ files 
#include <string>
#include "linelist.h"

using namespace std;

// method headers 
int Command(LineList& L, char *argv[]); 
void finishUp(LineList &L, char *argv[]);
void readFromFile(LineList&L, const char *filename);


int main(int argc, char *argv[]) { // main method 
	if(argc == 1) { // no filename provided
		cerr << "No filename provided."  << endl;
		exit(1); // exit with error code 
	}
	
	LineList L; // create a LineList object 
	
	readFromFile(L, argv[1]); // read contents of file	
	L.printList(); // print contents of L
	L.goToBottom(); // move currLine to bottom of list 
	
	Command(L, argv); // call to Command

	return 0;
}

void readFromFile(LineList& L, const char *filename) { // method to read info from file and input into L object
	ifstream infile(filename); // open file for input
	if(!infile) {
		exit(1);
	}

	string buffer;
	while(getline(infile,buffer)) { // read from file
		L.insertLine(buffer); // insert to L object 
	}
	infile.close(); // close for input
}

void finishUp(LineList& L, char *filename) { // method for case 'E' to save info back to file and exit
	ofstream file(filename);
	if(!file) {
		cout << "File cannot be accessed." << endl;
		exit(1);
	}
	
	L.goToTop();
	while (L.getCurrLineNum() <= L.getLength()) {
		file << L.getCurrLine() << "\n";
		L.moveNextLine();
	}
	
	file.close();		
}

int Command(LineList& L, char* argv[]) { // method to handle user input for specific cases 
	string line;	
	char command;

	do {
		cout << L.getCurrLineNum() << ">"; // responsible for line#>
		cin >> command; // reads in user command 
		
		switch(command) {
			case 'I': { // insert a new line  
				cout << L.getCurrLineNum() + 1 << ">";
				cin.ignore(); // ignore remaining characters
				getline(cin, line); // reads in user line to be inserted 
				L.insertLine(line);
				break;
			}
			case 'D': // delete current line  
				L.deleteLine();
				break;
			case 'L':// print L object  
				L.printList();
				break;
			case 'P':// move to previous line 
				L.movePrevLine();
				break;
			case 'N':// move to next line 
				L.moveNextLine();
				break;
			case 'E':  // save to file and exit 
				finishUp(L, argv[1]);
				break;
		} 
	} while (command != 'E'); // continues until user enters E 
}
]0;sanjeevirao_mp@cobra:~/CSC245/Prog1[sanjeevirao_mp@cobra Prog1]$ cat linelist.cpp
#include <iostream>
#include "linelist.h"

LineList::LineList()
{ // constructor 
	// create two LineNode objects 
	LineNode *line = new LineNode;
	LineNode *line2 = new LineNode;

	line -> info = topMessage;
	currLine = line;
	currLineNum = 1; 
	length = 0;
	line2 -> info = bottomMessage;
	currLine -> back = NULL;
	currLine -> next = line2;
	line2 -> back = line;
	line2 -> next = NULL;
}

void LineList::goToTop() 
{
	// Post : Advances currLine to line 1
	
	// iterate backwards until top message 
	while (currLine -> info != topMessage)
		currLine = currLine -> back;

	currLine = currLine -> next;
	currLineNum = 1;
}

void LineList::goToBottom() 
{
	// Post : Advances currLine to last line

	// iterate forwards until bottom message 
	while (currLine -> info != bottomMessage)
		currLine = currLine -> next;

	currLine = currLine -> back;
	currLineNum = length;
}

void LineList::insertLine(string newLine)
{
	// post : newLine has been inserted after the current line

	if (currLine -> info == bottomMessage) { // check if currLine is at bottomMessage 
           movePrevLine();
		
	}

	LineNode *line = new LineNode; // creare a new LineNode 

	line -> info = newLine;
	line -> back = currLine;
	line -> next = currLine -> next;

	currLine -> next -> back = line;
	currLine -> next = line;

	currLine = currLine -> next;
	currLineNum++;
	length++;
}

void LineList::deleteLine()
{
	// post : deletes the current line leaving currentLine
	//	  pointing to line following

	if ( (currLine -> info != topMessage) &&
	     (currLine -> info != bottomMessage) ) // checks if currLine is neither top nor bottom message 
	{
		LineNode *line = currLine; // temp pointer to currLine 

		currLine -> next -> back = currLine -> back;
		currLine -> back -> next = currLine -> next;
		currLine = currLine -> next;
	
		delete line; // free up memory 

		if (currLineNum == length)
			currLineNum--;

		length--;

		if (currLine -> info == topMessage)
			currLine = currLine -> next;

		if (currLine -> info == bottomMessage)
			currLine = currLine -> back;
	}
}

void LineList::printList() 
{
	int lineNum = 1;

	LineNode *mark = currLine;
	int markNum = currLineNum;

	goToTop();

	LineNode *line = currLine;
	// iterate through list and print 
	while (line -> info != bottomMessage)
	{
		cout << lineNum << "> " << line -> info << endl;
		line = line -> next;
		lineNum++;
	}
	// restores OG values 	
	currLine = mark;
	currLineNum = markNum;
}

string LineList::getCurrLine() const
{
	return (currLine -> info);
}

void LineList::moveNextLine()
{
	// Post : Advances currLine (unless already at last line)

	if ( (currLine -> next != NULL) && 
	     (currLine -> info != bottomMessage) ) // check if there is a next line and the currLine is not bottom message 
	{
	 	currLine = currLine -> next;
	 	currLineNum++;
	}

}

void LineList::movePrevLine()
{
	// Post : Advances currLine (unless already at last line)

	if ( (currLine -> back != NULL) &&
	     (currLine -> info != topMessage) ) // check if there is a previous like and if the current line is not top message 
	{
	 	currLine = currLine -> back;
	 	currLineNum--;
	}
}

int LineList::getCurrLineNum() const
{
	return currLineNum;
}

int LineList::getLength() const
{
	return length;
}
]0;sanjeevirao_mp@cobra:~/CSC245/Prog1[sanjeevirao_mp@cobra Prog1]$ c++ lin[K[K[Kei[Kditor.cpp linelist.o
]0;sanjeevirao_mp@cobra:~/CSC245/Prog1[sanjeevirao_mp@cobra Prog1]$ ./a.out testfile
1> This is my first line.
2> This is my second line.
3> This is my third line.
3>P
2>I
3>new line is inserted!
3>L
1> This is my first line.
2> This is my second line.
3> new line is inserted!
4> This is my third line.
3>N
4>D
3>D
2>L
1> This is my first line.
2> This is my second line.
2>E
]0;sanjeevirao_mp@cobra:~/CSC245/Prog1[sanjeevirao_mp@cobra Prog1]$ exit
exit

Script done on Tue 20 Feb 2024 03:04:17 PM EST
