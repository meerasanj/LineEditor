Client Program Goal: The goal of the client program is to provide a simple line editor that allows users to manipulate a list of text lines through certain commands. For instance, users can insert and delete lines, print the list, move through the list, and exit to save the changes to a file. 

Input/Output Files: The client program uses command-line arguments to open up the file stored in argv[1], which is called testfile. When the user enters the command ‘E,’ changes are saved to testfile. 

Input/Output: The user can input commands of 'I', 'D', 'L', 'P', 'N', 'E'. The client program outputs the current line number through <line#> as well as prompts and feedback messages. 

This program uses the LineList class, which is the implementation file, and the LineNode struct, which is part of the specification file. 

The LineList class represents the list of text lines as a doubly-linked list. Its private members include currLine, which is a pointer representing the current line. currLineNum is another private member that stores the current line number and the length variable denotes the total # of lines in the list. The operations (public functions) included are: 
goToTop(): moves currLine to the top of the list by iterating backwards until it gets to top of list. 
goToBottom(): moves currLine to the bottom of the list by iterating forwards until it gets to bottom of listinsertLine(): inserts a new line 
deleteLine(): deletes the current line and leaves currLine 
printList(): prints list 
getCurrLine(): retrieves currLine content 
moveNextLine(): moves currLine to the next line 
movePrevLine(): moves currLine to the previous line 
getCurrLineNum(): retrieves currLineNum 
getLength(): retrieves length of entire list.

The LineNode struct represents a node in the linked list. It stores pointers to the next and previous lines (next and back) as well as the information in a line (info). The specification file also utilities topMessage and bottomMessage as string constants as well as the string class from C++’s standard library. 

The client program, editor.cpp, first calls a method to read from the command line argument to obtain the filename. Then, the program opens the file for input and reads its content line by line. Each line is inserted into the LineList object. Then, the printList method and goToBottom method are called to print the initial list and set the current line to the bottom. Then, users can enter commands from 'I', 'D', 'L', 'P', 'N', 'E' through switch statements to respectively insert a new line, delete the current line, print the entire list, move to the previous line, move to the next line, or save changes to the file and exit (by calling the finishUp method for case 'E'). 


